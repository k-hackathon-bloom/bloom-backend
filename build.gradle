plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.1'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.asciidoctor.jvm.convert' version "3.3.2"
}

group = 'com.aliens'
version = '0.0.1-SNAPSHOT'

configurations {
    asciidoctorExtensions
}

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //SPRING_REST_DOCS
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    //JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    //VALIDATION
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //MYSQL
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation 'com.h2database:h2'

    //AWS S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    //FCM
    implementation 'com.google.firebase:firebase-admin:9.1.1'

    //QUERY_DSL
    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
    implementation "com.querydsl:querydsl-core:5.0.0"
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"

    //JSONObject
    implementation 'org.json:json:20230227'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

}

// QUERYDSL

def querydslDir = "build/generated/querydsl"

sourceSets {
    main.java.srcDirs += [querydslDir]
}

tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
    file(querydslDir).deleteDir()
}

// RESTDOCS

ext { // 스니펫 저장 경로 설정
    snippetsDir = file("build/generated-snippets")
    docsOutputDir = layout.buildDirectory.dir("docs/asciidoc")
}

test { // 테스트 실행 시 스니펫 생성
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor { // asciidoctor를 실행해 adoc 문서를 HTML로 변환
    dependsOn test
    inputs.dir snippetsDir
    configurations 'asciidoctorExtensions'
    outputDir = docsOutputDir.get().asFile
}

bootJar {
    dependsOn asciidoctor // 최종 JAR 파일에 정적 문서 포함
    from(docsOutputDir) {
        into("static/docs")
    }
}